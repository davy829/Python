# Задача №47. Решение в группах
# У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине
# программы используется множество раз и вы не хотите ничего сломать):
# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания
# функции transformation.
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать
# список значений, а нужно получить его как есть.
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился
# копией values.
# ---------------------------------R1-------------------------------------------
# transformation = lambda x: x ** 2 # в квадрат значения
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]  # или любой другой список
# transormed_values = list(map(transformation, values))
# print(*values)
# print(*transormed_values)
# ------------------------------------------------------------------------------
# def find_farthest_orbit(orbits):
#     nomirior = filter(lambda x: x[0] != x[1], orbits) # уберет равные значения
#     return max(nomirior, key=lambda x: x[0] * x[1]) # вернет максималь индекс
#
#
# orbits = [(1, 3), (2.5, 6), (7.6, 3), (6, 6), (4, 3)]
#
# print(*find_farthest_orbit(orbits))

# ------------------------------------------------------------------------------
# Задача №51. Решение в группах
# Напишите функцию same_by(characteristic, objects), которая
# проверяет, все ли объекты имеют одинаковое значение
# некоторой характеристики, и возвращают True, если это так.
# Если значение характеристики для разных объектов
# отличается - то False. Для пустого набора объектов, функция
# должна возвращать True. Аргумент characteristic - это
# функция, которая принимает объект и вычисляет его
# характеристику.
# -----------------------------R1-------------------------------------------
def same_by(f, v):
    for item in v:
        if not f(item):
            return False
        return True


values = [0, 2, 10, 6]
if same_by(lambda x: x % 2 == 0, values):
    print('same')
else:
    print('different')

# ----------------------------------------------------------------------------


#
# def same_by(fun,objects):
#     for item in objects:
#         if not fun(item):
#             return False
#     return True
#
# values = [0, 3, 10, 6]
#
# if same_by(lambda x: x % 2 == 0, values):
#     print("same")
# else:
#     print("different")
